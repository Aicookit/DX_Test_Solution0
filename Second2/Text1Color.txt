// DirectionalLightPS.txt



	float4 ambientLight;
	float4 diffuseLight;
	float4 specularLight;
	float4 directionLight;


	float4 ambientMat;
	float4 diffuseMat;
	float4 specularMat;
	float powerMat;

float3 eyePosW;

sampler2D tex;

struct PS_INPUT
{
	float2 uv : TEXCOORD0;
	float3 posW : TEXCOORD1; 
	float3 normalW :TEXCOORD2;
};

struct PS_OUTPUT
{
	float4 color: COLOR;
};


PS_OUTPUT main(PS_INPUT input)
{
	PS_OUTPUT output;
	float4 baseColor = tex2D(tex, input.uv);

	float3 dirLightDir = normalize(-direction.xyz);

    //ambient
	float4 dirAmbientColor =  ambientMat *  ambient;

	//diffuse
	float dirDiffuse = max(dot(dirLightDir, input.normalW), 0);
	float4 dirDiffuseColor =  diffuseMat * dirDiffuse *  diffuse;

	//specular
	float3 viewDir = normalize(eyePosW - input.posW.xyz);
	float3 halfDir = normalize(viewDir + dirLightDir);
	float dirSpecular = pow(max(dot(halfDir, input.normalW), 0),  powerMat);
	float4 dirSpecularColor =  specularMat * dirSpecular *  specular;

	output.color = baseColor * (dirAmbientColor + dirDiffuseColor + dirSpecularColor);
	output.color.w = baseColor.w;
	return output;
}