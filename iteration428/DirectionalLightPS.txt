// DirectionalLightPS.txt

DirectionalLight dirLight;   //dirLight 为结构体的变量
struct DirectionalLight
{
	 float4 AmbientMat;
	 float4 DiffuseMat;
	 float4 Specular;
	 float3 Direction;
};

Material mat;
struct Material
{
	float4 DiffuseMat;
	float4 DiffuseMat;
	float4 Specular;
	float4 Lightpower;
};

sampler2D texture;
struct PS_INPUT
{
	float2 uv : TEXCOORD0;
	float3 posW : TEXCOORD1;  /传入像素着色器用,TEXCOORD表示寄存器名字
	float3 normalW :TEXCOORD2;
};

struct PS_OUTPUT
{
	float4 color: COLOR;
};


PS_OUTPUT Main(PS_INPUT input)
{
	PS_OUTPUT output = (PS_OUTPUT)0;  

	float4 baseColor = tex2D(texture, input.uv);

	float3 dirLightDir = normalize(-dirLight.direction.xyz);  //单位化光方向

	float4 dirAmbientColor = mat.DiffuseMat * dirLight.DiffuseMat;

	float dirDiffuse = max(dot(dirLightDir, input.normalW), 0);
	float4 dirDiffuseColor = mat.DiffuseMat * dirDiffuse * dirLight.DiffuseMat;

	float3 viewDir = normalize(eyePosW - input.posW.xyz);
	float3 halfDir = normalize(viewDir + dirLightDir);
	float dirSpecular = pow(max(dot(halfDir, input.normalW), 0), mat.Lightpower);
	float4 dirSpecularColor = mat.Specular * dirSpecular * dirLight.Specular;

	output.color = baseColor * (dirAmbientColor + dirDiffuseColor + dirSpecularColor);
	output.color.w = baseColor.w;
	return output;
}