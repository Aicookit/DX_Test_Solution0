//聚光灯
matrix WVPMatrix;


PointLight Light_Spot;
struct SpotLight
{
    float4 Ambient;
    float4 Diffuse;
    float4 Specular;

    float3 Position;
    float Range;

    float3 Direction;
    float Spot;

    float3 Att;
    float pad;
};

struct VS_INPUT
{
    vector position  : POSITION;
	vector normal : NORMAL ；
};

struct VS_OUTPUT
{
    vector position : POSITION;
};

VS_OUTPUT Main(VS_INPUT input)
{
	VS_OUTPUT output = (VS_OUTPUT)0; 
	// 初始化输出
    ambient = float4(0.0f, 0.0f, 0.0f, 0.0f);
    diffuse = float4(0.0f, 0.0f, 0.0f, 0.0f);
    specular = float4(0.0f, 0.0f, 0.0f, 0.0f);

    float3 lightVec = L.Position - pos;  // 从表面到光源的向量

    float d = length(lightVec);  // 表面到光源的距离

    if (d > L.Range)  // 范围测试
        return;

    lightVec /= d;  // 标准化光向量

    ambient = mat.Ambient * L.Ambient; // 计算环境光部分

    float diffuseFactor = dot(lightVec, normal); // 计算漫反射光和镜面反射光部分

	
	[flatten]
    if (diffuseFactor > 0.0f)  // 展开以避免动态分支
    {
        float3 v = reflect(-lightVec, normal);
        float specFactor = pow(max(dot(v, toEye), 0.0f), mat.Specular.w);

        diffuse = diffuseFactor * mat.Diffuse * L.Diffuse;
        spec = specFactor * mat.Specular * L.Specular;
    }

    float spot = pow(max(dot(-lightVec, L.Direction), 0.0f), L.Spot); // 计算汇聚因子和衰弱系数 ---- 主要部分
    float att = spot / dot(L.Att, float3(1.0f, d, d * d));

    output.ambient *= spot;
    output.diffuse *= att;
    output.Specular *= att;

	return output;
}



